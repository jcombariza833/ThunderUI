// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios17.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name ThunderUIKit
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import Combine
import Foundation
import Observation
import Swift
import SwiftUI
@_exported import ThunderUIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct TUIDefaultIconScheme : ThunderUIKit.IconScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var pressedBackground: SwiftUICore.Color {
    get
  }
}
extension ThunderUIKit.ToggleScheme where Self == ThunderUIKit.TUIDefaultToggleScheme {
  public static var `default`: ThunderUIKit.TUIDefaultToggleScheme {
    get
  }
}
extension ThunderUIKit.ToggleScheme where Self == ThunderUIKit.TUIPrimaryToggleScheme {
  public static func primary(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme) -> ThunderUIKit.TUIPrimaryToggleScheme
}
extension ThunderUIKit.ToggleScheme where Self == ThunderUIKit.TUISecondaryToggleScheme {
  public static func secondary(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme) -> ThunderUIKit.TUISecondaryToggleScheme
}
extension ThunderUIKit.ToggleScheme where Self == ThunderUIKit.TUIErrorToggleScheme {
  public static func error(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme) -> ThunderUIKit.TUIErrorToggleScheme
}
public struct TUIPrimaryTextFieldScheme : ThunderUIKit.TextFieldScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var onDisabledBackground: SwiftUICore.Color {
    get
  }
  public var border: SwiftUICore.Color {
    get
  }
  public var placeholder: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public protocol Theme {
  var colorPalette: any ThunderUIKit.ColorPalette { get }
  var typography: any ThunderUIKit.Typography { get }
}
public struct TUISecondaryTextFieldScheme : ThunderUIKit.TextFieldScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var onDisabledBackground: SwiftUICore.Color {
    get
  }
  public var border: SwiftUICore.Color {
    get
  }
  public var placeholder: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public class TUIDevice {
  public var orientation: UIKit.UIDeviceOrientation {
    get
  }
  public var prevOrientation: UIKit.UIDeviceOrientation {
    get
  }
  public var width: CoreFoundation.CGFloat {
    get
  }
  public var height: CoreFoundation.CGFloat {
    get
  }
  public var isTallAspectRatio: Swift.Bool {
    get
  }
  public var shorterThaniPhoneX: Swift.Bool {
    get
  }
  public var device: UIKit.UIUserInterfaceIdiom {
    get
  }
  public init()
  @objc deinit
}
extension ThunderUIKit.TUIDevice : Observation.Observable {
}
extension SwiftUICore.EnvironmentValues {
  public var resizeStyle: ThunderUIKit.ResizeStyle {
    get
    set
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func resize(_ value: ThunderUIKit.ResizeStyle) -> some SwiftUICore.View
  
}
public protocol TUIButton : SwiftUICore.View {
}
@_Concurrency.MainActor @preconcurrency public struct ProgressModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(model: SwiftUICore.Binding<ThunderUIKit.ProgressModel?>, onDismiss: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func body(content: ThunderUIKit.ProgressModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit16ProgressModifierV4body7contentQr7SwiftUI05_ViewD8_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func activityIndicator(model: SwiftUICore.Binding<ThunderUIKit.ProgressModel?>) -> some SwiftUICore.View
  
}

public struct ProgressModel : Swift.Equatable {
  public enum Status {
    case loading, success, fail
    public static func == (a: ThunderUIKit.ProgressModel.Status, b: ThunderUIKit.ProgressModel.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(title: Swift.String? = nil, systemImage: Swift.String? = nil, status: ThunderUIKit.ProgressModel.Status)
  public static func == (a: ThunderUIKit.ProgressModel, b: ThunderUIKit.ProgressModel) -> Swift.Bool
}
@_Concurrency.MainActor @preconcurrency public struct TUIProgressView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(model: SwiftUICore.Binding<ThunderUIKit.ProgressModel?>)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit15TUIProgressViewV4bodyQrvp", 0) __
}


@_Concurrency.MainActor @preconcurrency public struct AlertModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(alertDetails: SwiftUICore.Binding<ThunderUIKit.AlertDetailsModel?>)
  @_Concurrency.MainActor @preconcurrency public func body(content: ThunderUIKit.AlertModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit13AlertModifierV4body7contentQr7SwiftUI05_ViewD8_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func alert(details: SwiftUICore.Binding<ThunderUIKit.AlertDetailsModel?>) -> some SwiftUICore.View
  
}
public struct Themes {
  public let light: any ThunderUIKit.Theme
  public let dark: any ThunderUIKit.Theme
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func captureSize(in binding: SwiftUICore.Binding<CoreFoundation.CGSize>) -> some SwiftUICore.View
  
}
public struct TUIPrimarySnackbarScheme : ThunderUIKit.SnackbarScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var shadow: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public var buttonFont: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
@_Concurrency.MainActor @preconcurrency public struct TUISnackBar : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(model: ThunderUIKit.SnackbarModel, onDismissAction: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit11TUISnackBarV4bodyQrvp", 0) __
}


@_Concurrency.MainActor @preconcurrency public struct SnackbarViewModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: ThunderUIKit.SnackbarViewModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit20SnackbarViewModifierV4body7contentQr7SwiftUI01_dE8_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func snackbar(model: SwiftUICore.Binding<ThunderUIKit.SnackbarModel?>, snackbarScheme: ThunderUIKit.SnackbarSchemeType = .default) -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct TUIFilledTextField : ThunderUIKit.TUITextField {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(_ placeholder: Swift.String, text: SwiftUICore.Binding<Swift.String>)
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit18TUIFilledTextFieldV4bodyQrvp", 0) __
}


public struct TUIDefaultTextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
}
public enum OBTitleContent {
  case string(Swift.String)
  case localizedKey(SwiftUICore.LocalizedStringKey)
}
@_Concurrency.MainActor @preconcurrency public struct OBTitle : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String)
  @_Concurrency.MainActor @preconcurrency public init(key: SwiftUICore.LocalizedStringKey)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit7OBTitleV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct TUILinkButtonStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init(buttonScheme: any ThunderUIKit.ButtonScheme, disabled: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: ThunderUIKit.TUILinkButtonStyle.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit18TUILinkButtonStyleV8makeBody13configurationQr7SwiftUI0dE13ConfigurationV_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct TUILinkButton : ThunderUIKit.TUIButton {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String, action: @escaping () -> Swift.Void)
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit13TUILinkButtonV4bodyQrvp", 0) __
}


extension SwiftUICore.EnvironmentValues {
  public var iconScheme: any ThunderUIKit.IconScheme {
    get
    set
  }
}
public enum IconSchemeType {
  case `default`
  case primary
  case secondary
  case error
  case custom(any ThunderUIKit.IconScheme)
}
extension SwiftUICore.View where Self == ThunderUIKit.TUIIcon {
  @_Concurrency.MainActor @preconcurrency public func iconScheme(_ value: ThunderUIKit.IconSchemeType) -> some SwiftUICore.View
  
}
public enum ThunderUIField<T> : Swift.Hashable where T : Swift.Hashable {
  case username
  case email
  case password
  case field(T)
  public static func == (a: ThunderUIKit.ThunderUIField<T>, b: ThunderUIKit.ThunderUIField<T>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct TUIStandardTextField : ThunderUIKit.TUITextField {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(_ placeholder: Swift.String, text: SwiftUICore.Binding<Swift.String>)
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit20TUIStandardTextFieldV4bodyQrvp", 0) __
}


public protocol ButtonScheme {
  var background: SwiftUICore.Color { get }
  var onBackground: SwiftUICore.Color { get }
  var disabledBackground: SwiftUICore.Color { get }
  var onDisabledBackground: SwiftUICore.Color { get }
  var pressedBackground: SwiftUICore.Color { get }
  var onPressedBackground: SwiftUICore.Color { get }
  var shadow: SwiftUICore.Color { get }
  var font: SwiftUICore.Font { get }
}
public protocol TextFieldScheme {
  var background: SwiftUICore.Color { get }
  var onBackground: SwiftUICore.Color { get }
  var disabledBackground: SwiftUICore.Color { get }
  var onDisabledBackground: SwiftUICore.Color { get }
  var border: SwiftUICore.Color { get }
  var placeholder: SwiftUICore.Color { get }
  var font: SwiftUICore.Font { get }
}
public protocol IconScheme {
  var background: SwiftUICore.Color { get }
  var disabledBackground: SwiftUICore.Color { get }
  var pressedBackground: SwiftUICore.Color { get }
}
public protocol SnackbarScheme {
  var background: SwiftUICore.Color { get }
  var onBackground: SwiftUICore.Color { get }
  var shadow: SwiftUICore.Color { get }
  var font: SwiftUICore.Font { get }
  var buttonFont: SwiftUICore.Font { get }
}
public protocol ToggleScheme {
  var background: SwiftUICore.Color { get }
  var onBackground: SwiftUICore.Color { get }
  var disabledBackground: SwiftUICore.Color { get }
  var onDisabledBackground: SwiftUICore.Color { get }
  var font: SwiftUICore.Font { get }
}
public protocol CardScheme {
  var background: SwiftUICore.Color { get }
  var onBackground: SwiftUICore.Color { get }
  var border: SwiftUICore.Color { get }
  var shadow: SwiftUICore.Color { get }
  var font: SwiftUICore.Font { get }
}
public protocol TextScheme {
  var foreground: SwiftUICore.Color { get }
  var font: SwiftUICore.Font { get }
}
public struct TUIDefaultSnackbarScheme : ThunderUIKit.SnackbarScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var pressedBackground: SwiftUICore.Color {
    get
  }
  public var onPressedBackground: SwiftUICore.Color {
    get
  }
  public var shadow: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public var buttonFont: SwiftUICore.Font {
    get
  }
}
public protocol TabData {
  var title: Swift.String { get }
  var image: Swift.String { get }
}
@_Concurrency.MainActor @preconcurrency public struct TabItemView<Content, Tab> : SwiftUICore.View where Content : SwiftUICore.View, Tab : Swift.Hashable, Tab : ThunderUIKit.TabData {
  @_Concurrency.MainActor @preconcurrency public init(tab: Tab, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit11TabItemViewV4bodyQrvp", 0) __<Content, Tab>
}
public struct TUIErrorTextFieldScheme : ThunderUIKit.TextFieldScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var onDisabledBackground: SwiftUICore.Color {
    get
  }
  public var border: SwiftUICore.Color {
    get
  }
  public var placeholder: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIDefaultTextFieldScheme : ThunderUIKit.TextFieldScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var onDisabledBackground: SwiftUICore.Color {
    get
  }
  public var border: SwiftUICore.Color {
    get
  }
  public var placeholder: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
}
public enum ResizeStyle {
  case fit
  case fill
  public static func == (a: ThunderUIKit.ResizeStyle, b: ThunderUIKit.ResizeStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.EnvironmentValues {
  public var textFieldScheme: any ThunderUIKit.TextFieldScheme {
    get
    set
  }
}
public enum TextFieldSchemeType {
  case `default`
  case primary
  case secondary
  case error
  case custom(any ThunderUIKit.TextFieldScheme)
}
extension SwiftUICore.View where Self : ThunderUIKit.TUITextField {
  @_Concurrency.MainActor @preconcurrency public func textFieldScheme(_ value: ThunderUIKit.TextFieldSchemeType) -> some SwiftUICore.View
  
}
public struct TUIH1TextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIH2TextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIH3TextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIH4TextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIH5TextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIH6TextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIS1TextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIS2TextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIB1TextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIB2TextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUICTextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIOTextScheme : ThunderUIKit.TextScheme {
  public var foreground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
extension Swift.String {
  public func isValidEmail() -> Swift.Bool
  public func isValidPassword() -> Swift.Bool
  public func isValidUsername() -> Swift.Bool
  public var hasNonWhitespaceCharacters: Swift.Bool {
    get
  }
  public func trim() -> Swift.String
}
@propertyWrapper public struct Email : SwiftUICore.DynamicProperty {
  public var wrappedValue: Swift.String {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUICore.Binding<Swift.String> {
    get
  }
  public init(wrappedValue: Swift.String)
}
extension SwiftUICore.EnvironmentValues {
  public var snackbarScheme: any ThunderUIKit.SnackbarScheme {
    get
    set
  }
}
public enum SnackbarSchemeType {
  case `default`
  case primary
  case secondary
  case error
  case custom(any ThunderUIKit.SnackbarScheme)
}
extension SwiftUICore.View where Self == ThunderUIKit.TUISnackBar {
  @_Concurrency.MainActor @preconcurrency public func snackbarScheme(_ value: ThunderUIKit.SnackbarSchemeType) -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  public var themes: ThunderUIKit.Themes {
    get
    set
  }
}
public struct SnackbarAction : Swift.Equatable {
  public init(title: Swift.String, action: @escaping () -> Swift.Void)
  public static func == (lhs: ThunderUIKit.SnackbarAction, rhs: ThunderUIKit.SnackbarAction) -> Swift.Bool
}
public struct SnackbarModel : Swift.Equatable {
  public init(message: Swift.String, autoHideDuration: Swift.Double = 2.0, action: ThunderUIKit.SnackbarAction? = nil, verticalSpacing: Swift.Double = 0)
  public static func == (a: ThunderUIKit.SnackbarModel, b: ThunderUIKit.SnackbarModel) -> Swift.Bool
}
public struct TUIErrorToggleScheme : ThunderUIKit.ToggleScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var onDisabledBackground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public protocol TUIToggle : SwiftUICore.View {
}
@_Concurrency.MainActor @preconcurrency public struct TUIToggleStyle : SwiftUI.ToggleStyle {
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String, toggleScheme: any ThunderUIKit.ToggleScheme, resize: ThunderUIKit.ResizeStyle = .fill, disabled: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: ThunderUIKit.TUIToggleStyle.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit14TUIToggleStyleV8makeBody13configurationQr7SwiftUI06ToggleD13ConfigurationV_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct TUIToggleView : ThunderUIKit.TUIToggle {
  @SwiftUICore.Binding @_projectedValueProperty($isOn) @_Concurrency.MainActor @preconcurrency public var isOn: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $isOn: SwiftUICore.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public let title: Swift.String
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(isOn: SwiftUICore.Binding<Swift.Bool>, title: Swift.String = "")
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit13TUIToggleViewV4bodyQrvp", 0) __
}


extension SwiftUICore.EnvironmentValues {
  public var iconSize: ThunderUIKit.IconSize {
    get
    set
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func iconSize(_ value: ThunderUIKit.IconSize) -> some SwiftUICore.View
  
}
public protocol Typography {
  var h1: SwiftUICore.Font { get }
  var h2: SwiftUICore.Font { get }
  var h3: SwiftUICore.Font { get }
  var h4: SwiftUICore.Font { get }
  var h5: SwiftUICore.Font { get }
  var h6: SwiftUICore.Font { get }
  var subtitle1: SwiftUICore.Font { get }
  var subtitle2: SwiftUICore.Font { get }
  var body1: SwiftUICore.Font { get }
  var body2: SwiftUICore.Font { get }
  var button: SwiftUICore.Font { get }
  var caption: SwiftUICore.Font { get }
  var overline: SwiftUICore.Font { get }
}
public enum SliderViewStyle {
  case normal
  case large
  public static func == (a: ThunderUIKit.SliderViewStyle, b: ThunderUIKit.SliderViewStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TUISliderConfig : Swift.Equatable {
  public init(color: SwiftUICore.Color = .blue, trackColor: SwiftUICore.Color = .gray.opacity(0.25), style: ThunderUIKit.SliderViewStyle = .normal)
  public static func == (a: ThunderUIKit.TUISliderConfig, b: ThunderUIKit.TUISliderConfig) -> Swift.Bool
}
@_Concurrency.MainActor @preconcurrency public struct TUISlider<V, Label, ValueLabel> : SwiftUICore.View where V : Swift.BinaryFloatingPoint, Label : SwiftUICore.View, ValueLabel : SwiftUICore.View, V.Stride : Swift.BinaryFloatingPoint {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit9TUISliderV4bodyQrvp", 0) __<V, Label, ValueLabel>
}
extension ThunderUIKit.TUISlider {
  @_Concurrency.MainActor @preconcurrency public init(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, config: ThunderUIKit.TUISliderConfig = .init(), @SwiftUICore.ViewBuilder label: @escaping () -> Label, @SwiftUICore.ViewBuilder minimumValueLabel: @escaping () -> ValueLabel, @SwiftUICore.ViewBuilder maximumValueLabel: @escaping () -> ValueLabel, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
}
extension ThunderUIKit.TUISlider where Label == SwiftUICore.EmptyView {
  @_Concurrency.MainActor @preconcurrency public init(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, config: ThunderUIKit.TUISliderConfig = .init(), @SwiftUICore.ViewBuilder minimumValueLabel: @escaping () -> ValueLabel, @SwiftUICore.ViewBuilder maximumValueLabel: @escaping () -> ValueLabel, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
}
extension ThunderUIKit.TUISlider where ValueLabel == SwiftUICore.EmptyView {
  @_Concurrency.MainActor @preconcurrency public init(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, config: ThunderUIKit.TUISliderConfig = .init(), @SwiftUICore.ViewBuilder label: @escaping () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
}
extension ThunderUIKit.TUISlider where Label == SwiftUICore.EmptyView, ValueLabel == SwiftUICore.EmptyView {
  @_Concurrency.MainActor @preconcurrency public init(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, config: ThunderUIKit.TUISliderConfig = .init(), onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
}

extension SwiftUICore.EnvironmentValues {
  public var textScheme: any ThunderUIKit.TextScheme {
    get
    set
  }
}
public enum TextSchemeType {
  case `default`
  case h1
  case h2
  case h3
  case h4
  case h5
  case h6
  case subtitle1
  case subtitle2
  case body1
  case body2
  case caption
  case overline
  case custom(any ThunderUIKit.TextScheme)
}
extension SwiftUICore.View where Self == ThunderUIKit.TUIText {
  @_Concurrency.MainActor @preconcurrency public func textScheme(_ value: ThunderUIKit.TextSchemeType) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func capturePosition(in binding: SwiftUICore.Binding<CoreFoundation.CGRect>, in coordinateSpace: some CoordinateSpaceProtocol) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func focusDismiss(_ isFocused: SwiftUI.FocusState<Swift.Bool>.Binding) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func multipleFocusDismiss<FocusedValue>(_ isFocused: SwiftUI.FocusState<FocusedValue?>.Binding) -> some SwiftUICore.View where FocusedValue : Swift.Hashable
  
}
@_Concurrency.MainActor @preconcurrency public struct TUIText : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(_ text: Swift.String)
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit7TUITextV4bodyQrvp", 0) __
}


public protocol ColorShades {
  var s50: SwiftUICore.Color { get }
  var s100: SwiftUICore.Color { get }
  var s200: SwiftUICore.Color { get }
  var s300: SwiftUICore.Color { get }
  var s400: SwiftUICore.Color { get }
  var s500: SwiftUICore.Color { get }
  var s600: SwiftUICore.Color { get }
  var s700: SwiftUICore.Color { get }
  var s800: SwiftUICore.Color { get }
  var s900: SwiftUICore.Color { get }
}
public protocol BrandColor {
  var primary: any ThunderUIKit.ColorShades { get }
  var onPrimary: SwiftUICore.Color { get }
  var secondary: any ThunderUIKit.ColorShades { get }
  var onSecondary: SwiftUICore.Color { get }
  var accent: (any ThunderUIKit.ColorShades)? { get }
  var onAccent: SwiftUICore.Color? { get }
}
public protocol FunctionalColor {
  var error: SwiftUICore.Color { get }
  var onError: SwiftUICore.Color { get }
  var warning: SwiftUICore.Color { get }
  var onWarning: SwiftUICore.Color { get }
  var success: SwiftUICore.Color { get }
  var onSuccess: SwiftUICore.Color { get }
  var info: SwiftUICore.Color { get }
  var onInfo: SwiftUICore.Color { get }
}
public protocol NeutralColor {
  var surface: SwiftUICore.Color { get }
  var oSurface: SwiftUICore.Color { get }
  var background: SwiftUICore.Color { get }
  var onBackground: SwiftUICore.Color { get }
  var border: SwiftUICore.Color { get }
  var shadow: SwiftUICore.Color { get }
}
public protocol ColorPalette : ThunderUIKit.BrandColor, ThunderUIKit.FunctionalColor, ThunderUIKit.NeutralColor {
}
public enum IconSize : CoreFoundation.CGFloat {
  case small
  case medium
  case large
  public init?(rawValue: CoreFoundation.CGFloat)
  public typealias RawValue = CoreFoundation.CGFloat
  public var rawValue: CoreFoundation.CGFloat {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct TUIIconButtonStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init(iconScheme: any ThunderUIKit.IconScheme, disabled: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: ThunderUIKit.TUIIconButtonStyle.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit18TUIIconButtonStyleV8makeBody13configurationQr7SwiftUI0dE13ConfigurationV_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct TUIIcon : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(systemName: Swift.String, action: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit7TUIIconV4bodyQrvp", 0) __
}


extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func optionPicker<Option>(isPresented: SwiftUICore.Binding<Swift.Bool>, option: SwiftUICore.Binding<Option?>) -> some SwiftUICore.View where Option : ThunderUIKit.PickerOption
  
}


@_Concurrency.MainActor @preconcurrency public struct TUIFilledSecureField : ThunderUIKit.TUITextField {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(_ placeholder: Swift.String, text: SwiftUICore.Binding<Swift.String>)
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit20TUIFilledSecureFieldV4bodyQrvp", 0) __
}


public struct TUIPrimaryButtonScheme : ThunderUIKit.ButtonScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var onDisabledBackground: SwiftUICore.Color {
    get
  }
  public var pressedBackground: SwiftUICore.Color {
    get
  }
  public var onPressedBackground: SwiftUICore.Color {
    get
  }
  public var shadow: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
extension SwiftUICore.EnvironmentValues {
  public var tuDevice: ThunderUIKit.TUIDevice {
    get
    set
  }
}
@_Concurrency.MainActor @preconcurrency public struct TUIOutlinedTextField : ThunderUIKit.TUITextField {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(_ placeholder: Swift.String, text: SwiftUICore.Binding<Swift.String>)
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit20TUIOutlinedTextFieldV4bodyQrvp", 0) __
}


public struct TUIDefaultButtonScheme : ThunderUIKit.ButtonScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var onDisabledBackground: SwiftUICore.Color {
    get
  }
  public var pressedBackground: SwiftUICore.Color {
    get
  }
  public var onPressedBackground: SwiftUICore.Color {
    get
  }
  public var shadow: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
}
extension SwiftUICore.Color {
  public init(hex: Swift.String)
  public var hexString: Swift.String {
    get
  }
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
  public var hexString: Swift.String {
    get
  }
}
public struct TUISecondarySnackbarScheme : ThunderUIKit.SnackbarScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var shadow: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public var buttonFont: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public protocol PickerOption : Swift.CaseIterable, Swift.Hashable {
  var optionDescription: Swift.String { get }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func effectScaleToFit(_ originaSize: CoreFoundation.CGSize) -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  public var toggleScheme: any ThunderUIKit.ToggleScheme {
    get
    set
  }
}
public enum ToggleSchemeType {
  case `default`
  case primary
  case secondary
  case error
  case custom(any ThunderUIKit.ToggleScheme)
}
extension SwiftUICore.View where Self : ThunderUIKit.TUIToggle {
  @_Concurrency.MainActor @preconcurrency public func toggleScheme(_ value: ThunderUIKit.ToggleSchemeType) -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct TUIStandardSecureField : ThunderUIKit.TUITextField {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(_ placeholder: Swift.String, text: SwiftUICore.Binding<Swift.String>)
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit22TUIStandardSecureFieldV4bodyQrvp", 0) __
}



public struct TUISecondaryIconScheme : ThunderUIKit.IconScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var pressedBackground: SwiftUICore.Color {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public protocol TUITextField : SwiftUICore.View {
}
extension SwiftUICore.EnvironmentValues {
  public var presentDismiss: () -> Swift.Void {
    get
    set
  }
}
extension SwiftUICore.EnvironmentValues {
  public var leftIcon: () -> SwiftUICore.AnyView {
    get
    set
  }
}
extension SwiftUICore.EnvironmentValues {
  public var rightIcon: () -> SwiftUICore.AnyView {
    get
    set
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func leftIcon<Content>(@SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func rightIcon<Content>(@SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
public struct TUIErrorButtonScheme : ThunderUIKit.ButtonScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var onDisabledBackground: SwiftUICore.Color {
    get
  }
  public var pressedBackground: SwiftUICore.Color {
    get
  }
  public var onPressedBackground: SwiftUICore.Color {
    get
  }
  public var shadow: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
@_Concurrency.MainActor @preconcurrency public struct PresentModifier<PresentContent> : SwiftUICore.ViewModifier where PresentContent : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(isPresented: SwiftUICore.Binding<Swift.Bool>, transition: SwiftUICore.AnyTransition = .opacity, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> PresentContent)
  @_Concurrency.MainActor @preconcurrency public func body(content: ThunderUIKit.PresentModifier<PresentContent>.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit15PresentModifierV4body7contentQr7SwiftUI05_ViewD8_ContentVyACyxGG_tF", 0) __<PresentContent>
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func present<PresentContent>(isPresented: SwiftUICore.Binding<Swift.Bool>, transition: SwiftUICore.AnyTransition = .opacity, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> PresentContent) -> some SwiftUICore.View where PresentContent : SwiftUICore.View
  
}

public struct TUIErrorSnackbarScheme : ThunderUIKit.SnackbarScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var shadow: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public var buttonFont: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIPrimaryToggleScheme : ThunderUIKit.ToggleScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var onDisabledBackground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUIPrimaryIconScheme : ThunderUIKit.IconScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var pressedBackground: SwiftUICore.Color {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
@_Concurrency.MainActor @preconcurrency public struct TUIOutlinedButtonStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init(buttonScheme: any ThunderUIKit.ButtonScheme, resize: ThunderUIKit.ResizeStyle = .fill, disabled: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: ThunderUIKit.TUIOutlinedButtonStyle.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit22TUIOutlinedButtonStyleV8makeBody13configurationQr7SwiftUI0dE13ConfigurationV_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct TUIOutlinedButton : ThunderUIKit.TUIButton {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String, systemImage: Swift.String? = nil, action: @escaping () -> Swift.Void)
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit17TUIOutlinedButtonV4bodyQrvp", 0) __
}


public enum AlertType {
  case alert
  case confirmationDialog
  public static func == (a: ThunderUIKit.AlertType, b: ThunderUIKit.AlertType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AlertDetailsModel {
  public let title: Swift.String
  public let message: Swift.String?
  public let actions: [ThunderUIKit.AlertActionModel]
  public let titleVisibility: SwiftUICore.Visibility
  public let alertType: ThunderUIKit.AlertType
  public init(title: Swift.String, message: Swift.String? = nil, actions: [ThunderUIKit.AlertActionModel], titleVisibility: SwiftUICore.Visibility = .visible, alertType: ThunderUIKit.AlertType = .alert)
}
public struct AlertActionModel {
  public let title: Swift.String
  public let style: SwiftUI.ButtonRole?
  public let action: () -> Swift.Void
  public init(title: Swift.String, style: SwiftUI.ButtonRole? = nil, action: @escaping () -> Swift.Void)
}
extension CoreFoundation.CGFloat {
  public static let x1: CoreFoundation.CGFloat
  public static let x2: CoreFoundation.CGFloat
  public static let x3: CoreFoundation.CGFloat
  public static let x4: CoreFoundation.CGFloat
  public static let x5: CoreFoundation.CGFloat
  public static let x6: CoreFoundation.CGFloat
  public static let x7: CoreFoundation.CGFloat
  public static let x8: CoreFoundation.CGFloat
  public static let x9: CoreFoundation.CGFloat
  public static let x10: CoreFoundation.CGFloat
  public static let x11: CoreFoundation.CGFloat
  public static let x12: CoreFoundation.CGFloat
  public static let x13: CoreFoundation.CGFloat
  public static let x14: CoreFoundation.CGFloat
  public static func custom(_ multiplier: Swift.Int) -> CoreFoundation.CGFloat
}
@_Concurrency.MainActor @preconcurrency public struct TUIOutlinedSecureField : ThunderUIKit.TUITextField {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(_ placeholder: Swift.String, text: SwiftUICore.Binding<Swift.String>)
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit22TUIOutlinedSecureFieldV4bodyQrvp", 0) __
}


public struct TUISecondaryButtonScheme : ThunderUIKit.ButtonScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var onDisabledBackground: SwiftUICore.Color {
    get
  }
  public var pressedBackground: SwiftUICore.Color {
    get
  }
  public var onPressedBackground: SwiftUICore.Color {
    get
  }
  public var shadow: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
@_Concurrency.MainActor @preconcurrency public struct TUIElevatedButtonStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init(buttonScheme: any ThunderUIKit.ButtonScheme, resize: ThunderUIKit.ResizeStyle = .fill, disabled: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: ThunderUIKit.TUIElevatedButtonStyle.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit22TUIElevatedButtonStyleV8makeBody13configurationQr7SwiftUI0dE13ConfigurationV_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct TUIElevatedButton : ThunderUIKit.TUIButton {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String, systemImage: Swift.String? = nil, action: @escaping () -> Swift.Void)
  public typealias Body = @_opaqueReturnTypeOf("$s12ThunderUIKit17TUIElevatedButtonV4bodyQrvp", 0) __
}


public struct TUIDefaultToggleScheme : ThunderUIKit.ToggleScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var onDisabledBackground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
}
public struct TUIErrorIconScheme : ThunderUIKit.IconScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var pressedBackground: SwiftUICore.Color {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
public struct TUISecondaryToggleScheme : ThunderUIKit.ToggleScheme {
  public var background: SwiftUICore.Color {
    get
  }
  public var onBackground: SwiftUICore.Color {
    get
  }
  public var disabledBackground: SwiftUICore.Color {
    get
  }
  public var onDisabledBackground: SwiftUICore.Color {
    get
  }
  public var font: SwiftUICore.Font {
    get
  }
  public init(themes: ThunderUIKit.Themes, colorScheme: SwiftUICore.ColorScheme)
}
extension SwiftUICore.EnvironmentValues {
  public var buttonScheme: any ThunderUIKit.ButtonScheme {
    get
    set
  }
}
public enum ButtonSchemeType {
  case `default`
  case primary
  case secondary
  case error
  case custom(any ThunderUIKit.ButtonScheme)
}
extension SwiftUICore.View where Self : ThunderUIKit.TUIButton {
  @_Concurrency.MainActor @preconcurrency public func buttonScheme(_ value: ThunderUIKit.ButtonSchemeType) -> some SwiftUICore.View
  
}
extension ThunderUIKit.ProgressModifier : Swift.Sendable {}
extension ThunderUIKit.ProgressModel.Status : Swift.Equatable {}
extension ThunderUIKit.ProgressModel.Status : Swift.Hashable {}
extension ThunderUIKit.TUIProgressView : Swift.Sendable {}
extension ThunderUIKit.AlertModifier : Swift.Sendable {}
extension ThunderUIKit.TUISnackBar : Swift.Sendable {}
extension ThunderUIKit.SnackbarViewModifier : Swift.Sendable {}
extension ThunderUIKit.TUIFilledTextField : Swift.Sendable {}
extension ThunderUIKit.OBTitle : Swift.Sendable {}
extension ThunderUIKit.TUILinkButtonStyle : Swift.Sendable {}
extension ThunderUIKit.TUILinkButton : Swift.Sendable {}
extension ThunderUIKit.TUIStandardTextField : Swift.Sendable {}
extension ThunderUIKit.TabItemView : Swift.Sendable {}
extension ThunderUIKit.ResizeStyle : Swift.Equatable {}
extension ThunderUIKit.ResizeStyle : Swift.Hashable {}
extension ThunderUIKit.TUIToggleStyle : Swift.Sendable {}
extension ThunderUIKit.TUIToggleView : Swift.Sendable {}
extension ThunderUIKit.SliderViewStyle : Swift.Equatable {}
extension ThunderUIKit.SliderViewStyle : Swift.Hashable {}
extension ThunderUIKit.TUISlider : Swift.Sendable {}
extension ThunderUIKit.TUIText : Swift.Sendable {}
extension ThunderUIKit.IconSize : Swift.Equatable {}
extension ThunderUIKit.IconSize : Swift.Hashable {}
extension ThunderUIKit.IconSize : Swift.RawRepresentable {}
extension ThunderUIKit.TUIIconButtonStyle : Swift.Sendable {}
extension ThunderUIKit.TUIIcon : Swift.Sendable {}
extension ThunderUIKit.TUIFilledSecureField : Swift.Sendable {}
extension ThunderUIKit.TUIOutlinedTextField : Swift.Sendable {}
extension ThunderUIKit.TUIStandardSecureField : Swift.Sendable {}
extension ThunderUIKit.PresentModifier : Swift.Sendable {}
extension ThunderUIKit.TUIOutlinedButtonStyle : Swift.Sendable {}
extension ThunderUIKit.TUIOutlinedButton : Swift.Sendable {}
extension ThunderUIKit.AlertType : Swift.Equatable {}
extension ThunderUIKit.AlertType : Swift.Hashable {}
extension ThunderUIKit.TUIOutlinedSecureField : Swift.Sendable {}
extension ThunderUIKit.TUIElevatedButtonStyle : Swift.Sendable {}
extension ThunderUIKit.TUIElevatedButton : Swift.Sendable {}
